security:
    # https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        fetcher:
            id: App\Security\UserProvider
        jwt:
            lexik_jwt: ~
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        token_refresh:
            pattern: ^/token/refresh
            stateless: true
            user_checker: App\Security\UserChecker
            refresh_jwt:
                provider: fetcher
        token:
            pattern: ^/token
            stateless: true
            provider: fetcher
            user_checker: App\Security\UserChecker
            json_login:
                check_path: /token
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        main:
            stateless: true
            provider: jwt
            jwt: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_USER
            - ROLE_MANAGE_USERS

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/token/refresh, roles: PUBLIC_ACCESS }
        # - { path: ^/profile, roles: ROLE_USER }
